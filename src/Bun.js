// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Primitive_option from "rescript/lib/es6/Primitive_option.js";

let StringOrBuffer = {};

let Env = {};

let Server = {};

let BunFile = {};

let Destination = {};

let Input = {};

let Write = {
  Destination: Destination,
  Input: Input
};

let TypedArrayOrBuffer = {};

let asPromise = (function asPromise(v) {
    return v instanceof Promise ? v : undefined
  });

function decode(v) {
  let v$1 = asPromise(v);
  if (v$1 !== undefined) {
    return {
      TAG: "Async",
      _0: v$1
    };
  } else {
    return {
      TAG: "Sync",
      _0: v
    };
  }
}

let Peek = {
  decode: decode
};

let asUint8Array = (function asUint8Array(raw) {
      if (raw instanceof Uint8Array) {
        return raw
      }
    });

function decode$1(raw) {
  let v = asUint8Array(raw);
  if (v !== undefined) {
    return {
      TAG: "Uint8Array",
      _0: Primitive_option.valFromOption(v)
    };
  } else {
    return {
      TAG: "ArrayBuffer",
      _0: raw
    };
  }
}

let EndResult = {
  decode: decode$1
};

let asUint8Array$1 = (function asUint8Array(raw) {
      if (raw instanceof Uint8Array) {
        return raw
      }
    });

let asArrayBuffer = (function asArrayBuffer(raw) {
      if (raw instanceof ArrayBuffer) {
        return raw
      }
    });

function decode$2(raw) {
  let v = asUint8Array$1(raw);
  if (v !== undefined) {
    return {
      TAG: "Uint8Array",
      _0: Primitive_option.valFromOption(v)
    };
  }
  let v$1 = asArrayBuffer(raw);
  if (v$1 !== undefined) {
    return {
      TAG: "ArrayBuffer",
      _0: Primitive_option.valFromOption(v$1)
    };
  } else {
    return {
      TAG: "Bytes",
      _0: raw
    };
  }
}

let FlushResult = {
  decode: decode$2
};

let ArrayBufferSink = {
  EndResult: EndResult,
  FlushResult: FlushResult
};

let Dns = {};

let FileSink = {};

let WyHash = {};

let Adler32 = {};

let Crc32 = {};

let CityHash32 = {};

let CityHash64 = {};

let Murmur32v3 = {};

let Murmur32v2 = {};

let Murmur64v2 = {};

let Algorithms = {
  WyHash: WyHash,
  Adler32: Adler32,
  Crc32: Crc32,
  CityHash32: CityHash32,
  CityHash64: CityHash64,
  Murmur32v3: Murmur32v3,
  Murmur32v2: Murmur32v2,
  Murmur64v2: Murmur64v2
};

let Hash = {
  Algorithms: Algorithms
};

let BunPlugin = {};

let Transpiler = {};

let BuildArtifact = {};

let Build = {
  BuildArtifact: BuildArtifact
};

let Password = {};

let SemVer = {};

let CryptoHasher = {};

let FileSystemRouter = {};

let Glob = {};

export {
  StringOrBuffer,
  Env,
  Server,
  BunFile,
  Write,
  TypedArrayOrBuffer,
  Peek,
  ArrayBufferSink,
  Dns,
  FileSink,
  Hash,
  BunPlugin,
  Transpiler,
  Build,
  Password,
  SemVer,
  CryptoHasher,
  FileSystemRouter,
  Glob,
}
/* No side effect */
