// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml_option from "rescript/lib/es6/caml_option.js";

var StringOrBuffer = {};

var Env = {};

var Server = {};

var BunFile = {};

var Destination = {};

var Input = {};

var Write = {
  Destination: Destination,
  Input: Input
};

var TypedArrayOrBuffer = {};

var asPromise = (function asPromise(v) {
    return v instanceof Promise ? v : undefined
  });

function decode(v) {
  var v$1 = asPromise(v);
  if (v$1 !== undefined) {
    return {
            TAG: "Async",
            _0: Caml_option.valFromOption(v$1)
          };
  } else {
    return {
            TAG: "Sync",
            _0: v
          };
  }
}

var Peek = {
  decode: decode
};

var asUint8Array = (function asUint8Array(raw) {
      if (raw instanceof Uint8Array) {
        return raw
      }
    });

function decode$1(raw) {
  var v = asUint8Array(raw);
  if (v !== undefined) {
    return {
            TAG: "Uint8Array",
            _0: Caml_option.valFromOption(v)
          };
  } else {
    return {
            TAG: "ArrayBuffer",
            _0: raw
          };
  }
}

var EndResult = {
  decode: decode$1
};

var asUint8Array$1 = (function asUint8Array(raw) {
      if (raw instanceof Uint8Array) {
        return raw
      }
    });

var asArrayBuffer = (function asArrayBuffer(raw) {
      if (raw instanceof ArrayBuffer) {
        return raw
      }
    });

function decode$2(raw) {
  var v = asUint8Array$1(raw);
  if (v !== undefined) {
    return {
            TAG: "Uint8Array",
            _0: Caml_option.valFromOption(v)
          };
  }
  var v$1 = asArrayBuffer(raw);
  if (v$1 !== undefined) {
    return {
            TAG: "ArrayBuffer",
            _0: Caml_option.valFromOption(v$1)
          };
  } else {
    return {
            TAG: "Bytes",
            _0: raw
          };
  }
}

var FlushResult = {
  decode: decode$2
};

var ArrayBufferSink = {
  EndResult: EndResult,
  FlushResult: FlushResult
};

var Dns = {};

var FileSink = {};

var WyHash = {};

var Adler32 = {};

var Crc32 = {};

var CityHash32 = {};

var CityHash64 = {};

var Murmur32v3 = {};

var Murmur32v2 = {};

var Murmur64v2 = {};

var Algorithms = {
  WyHash: WyHash,
  Adler32: Adler32,
  Crc32: Crc32,
  CityHash32: CityHash32,
  CityHash64: CityHash64,
  Murmur32v3: Murmur32v3,
  Murmur32v2: Murmur32v2,
  Murmur64v2: Murmur64v2
};

var Hash = {
  Algorithms: Algorithms
};

var BunPlugin = {};

var Transpiler = {};

var BuildArtifact = {};

var Build = {
  BuildArtifact: BuildArtifact
};

var Password = {};

var SemVer = {};

var CryptoHasher = {};

var FileSystemRouter = {};

var Glob = {};

export {
  StringOrBuffer ,
  Env ,
  Server ,
  BunFile ,
  Write ,
  TypedArrayOrBuffer ,
  Peek ,
  ArrayBufferSink ,
  Dns ,
  FileSink ,
  Hash ,
  BunPlugin ,
  Transpiler ,
  Build ,
  Password ,
  SemVer ,
  CryptoHasher ,
  FileSystemRouter ,
  Glob ,
}
/* No side effect */
