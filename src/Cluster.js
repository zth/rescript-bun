// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_dict from "rescript/lib/es6/Js_dict.js";
import * as Disconnect from "disconnect";
import * as Nodecluster from "node:cluster";
import * as Js_null_undefined from "rescript/lib/es6/Js_null_undefined.js";

function classify(x) {
  let addressType = x.addressType;
  let intOrString = typeof addressType;
  switch (intOrString) {
    case "number" :
      switch (addressType) {
        case -1 :
          return {
            TAG: "UnixDomainSocket",
            _0: x
          };
        case 4 :
          return {
            TAG: "TcpV4",
            _0: x
          };
        case 6 :
          return {
            TAG: "TcpV6",
            _0: x
          };
        default:
          return {
            TAG: "Unknown",
            _0: x
          };
      }
    case "string" :
      switch (addressType) {
        case "udp4" :
          return {
            TAG: "Udp4",
            _0: x
          };
        case "udp6" :
          return {
            TAG: "Udp6",
            _0: x
          };
        default:
          return {
            TAG: "Unknown",
            _0: x
          };
      }
    default:
      return {
        TAG: "Unknown",
        _0: x
      };
  }
}

let Address = {
  classify: classify
};

let Message = {};

let Events = {};

function sendHttpServerHandle(options, msg, handle) {
  msg.send(handle, Js_null_undefined.fromOption(options));
}

function sendSocketHandle(options, msg, handle) {
  msg.send(handle, Js_null_undefined.fromOption(options));
}

let Worker = {
  Events: Events,
  sendHttpServerHandle: sendHttpServerHandle,
  sendSocketHandle: sendSocketHandle
};

function disconnect(callback, param) {
  Disconnect(Js_null_undefined.fromOption(callback));
}

function fork(env, param) {
  return Nodecluster.fork(env);
}

let decodeSchedulingPolicy = Nodecluster.schedulingPolicy === Nodecluster.SCHED_RR ? "SCHED_RR" : "SCHED_NONE";

function getWorker(_workers, id) {
  return Js_dict.get(_workers, id.toString());
}

export {
  Address,
  Message,
  Worker,
  disconnect,
  fork,
  decodeSchedulingPolicy,
  getWorker,
}
/* decodeSchedulingPolicy Not a pure module */
