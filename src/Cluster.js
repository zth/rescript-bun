// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Disconnect from "disconnect";
import * as Nodecluster from "node:cluster";
import * as Stdlib_Nullable from "@rescript/runtime/lib/es6/Stdlib_Nullable.js";

function classify(x) {
  let addressType = x.addressType;
  let intOrString = typeof addressType;
  if (intOrString === "string") {
    switch (addressType) {
      case "udp4" :
        return {
          TAG: "Udp4",
          _0: x
        };
      case "udp6" :
        return {
          TAG: "Udp6",
          _0: x
        };
      default:
        return {
          TAG: "Unknown",
          _0: x
        };
    }
  } else {
    if (intOrString !== "number") {
      return {
        TAG: "Unknown",
        _0: x
      };
    }
    switch (addressType) {
      case -1 :
        return {
          TAG: "UnixDomainSocket",
          _0: x
        };
      case 4 :
        return {
          TAG: "TcpV4",
          _0: x
        };
      case 6 :
        return {
          TAG: "TcpV6",
          _0: x
        };
      default:
        return {
          TAG: "Unknown",
          _0: x
        };
    }
  }
}

let Address = {
  classify: classify
};

let Message = {};

let Events = {};

function sendHttpServerHandle(options, msg, handle) {
  msg.send(handle, Stdlib_Nullable.fromOption(options));
}

function sendSocketHandle(options, msg, handle) {
  msg.send(handle, Stdlib_Nullable.fromOption(options));
}

let Worker = {
  Events: Events,
  sendHttpServerHandle: sendHttpServerHandle,
  sendSocketHandle: sendSocketHandle
};

function disconnect(callback, param) {
  Disconnect(Stdlib_Nullable.fromOption(callback));
}

function fork(env, param) {
  return Nodecluster.fork(env);
}

let decodeSchedulingPolicy = Nodecluster.schedulingPolicy === Nodecluster.SCHED_RR ? "SCHED_RR" : "SCHED_NONE";

function getWorker(_workers, id) {
  return _workers[id.toString()];
}

export {
  Address,
  Message,
  Worker,
  disconnect,
  fork,
  decodeSchedulingPolicy,
  getWorker,
}
/* decodeSchedulingPolicy Not a pure module */
